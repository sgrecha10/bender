services:
  django:
    container_name: ${COMPOSE_PROJECT_NAME}_django
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
    networks:
      - default
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    expose:
      - "8000"
    command: python3 manage.py runserver 0.0.0.0:8000
    depends_on:
      - postgres_db
      - redis
      - celery
      - flower
      - rabbitmq
      - celerybeat
      - kafka
      - kafka-ui

  redis:
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - default

  celery:
    container_name: ${COMPOSE_PROJECT_NAME}_celery
    depends_on:
      - postgres_db
      - redis
      - rabbitmq
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - default
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    command: celery -A bender.celery_entry worker -l info

  celerybeat:
    container_name: ${COMPOSE_PROJECT_NAME}_celerybeat
    depends_on:
      - celery
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - default
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    entrypoint: celery -A bender.celery_entry beat

  postgres_db:
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    hostname: postgres
    image: postgres:14.1-alpine
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    ports:
      - "5435:5432"
    networks:
      - default
    volumes:
      - benderdb:/var/lib/postgres_14/data
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=32MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      - POSTGRES_DB=bender
      - POSTGRES_USER=bender
      - POSTGRES_PASSWORD=bender
      - POSTGRES_PORT=5432

  rabbitmq:
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    image: rabbitmq:3.9.11-management
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    ports:
      - "${RABBITMQ_PUBLIC_PORT:-15672}:15672"
    networks:
      - default

  flower:
    container_name: ${COMPOSE_PROJECT_NAME}_flower
    depends_on:
      - celery
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - default
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    command: celery -A bender.celery_entry flower --port=5555

  kafka:
    image: bitnami/kafka:3.4.1
    container_name: ${COMPOSE_PROJECT_NAME}_kafka
    networks:
      - default
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    volumes:
       - kafkadb:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: ${COMPOSE_PROJECT_NAME}_kafka_ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=${COMPOSE_PROJECT_NAME}_cluster
    networks:
      - default
    depends_on:
      - kafka

networks:
  default:
    name: bendernetwork
    driver: bridge

volumes:
  benderdb:
  kafkadb:

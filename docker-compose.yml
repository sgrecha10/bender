version: '2.4'

services:
  django:
    container_name: ${COMPOSE_PROJECT_NAME}_django
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
    networks:
      - bendernetwork
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    expose:
      - "8000"
    command: python3 manage.py runserver 0.0.0.0:8000
    depends_on:
      - postgres_db
      - redis
      - celery
      - flower
      - rabbitmq
      - celerybeat
      - kafka

  redis:
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    image: redis:7-alpine
    networks:
      - bendernetwork

  celery:
    container_name: ${COMPOSE_PROJECT_NAME}_celery
    depends_on:
      - postgres_db
      - redis
      - rabbitmq
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - bendernetwork
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    command: celery -A bender.celery_entry worker -l info

  celerybeat:
    container_name: ${COMPOSE_PROJECT_NAME}_celerybeat
    depends_on:
      - celery
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - bendernetwork
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    entrypoint: celery -A bender.celery_entry beat

  postgres_db:
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    hostname: postgres
    image: postgres:14.1-alpine
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    ports:
      - "5435:5432"
    networks:
      - bendernetwork
    volumes:
      - benderdb:/var/lib/postgres_14/data
    environment:
      - POSTGRES_DB=bender
      - POSTGRES_USER=bender
      - POSTGRES_PASSWORD=bender
      - POSTGRES_PORT=5432

  rabbitmq:
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    image: rabbitmq:3.9.11-management
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    ports:
      - "${RABBITMQ_PUBLIC_PORT:-15672}:15672"
    networks:
      - bendernetwork

  flower:
    container_name: ${COMPOSE_PROJECT_NAME}_flower
    depends_on:
      - celery
    image: ${COMPOSE_PROJECT_NAME}_python
    build:
      context: .
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - bendernetwork
    volumes:
      - ./src:/app
    env_file:
      - ./.env
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    command: celery -A bender.celery_entry flower --port=5555

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: ${COMPOSE_PROJECT_NAME}_zookeeper
    networks:
      - bendernetwork
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3.4.1
    container_name: ${COMPOSE_PROJECT_NAME}_kafka
    networks:
      - bendernetwork
    ports:
      - "9092:9092"
    environment:
#      - KAFKA_BROKER_ID=1
#      - KAFKA_LISTENERS=PLAINTEXT://:9092
#      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.5.0.1:9092
#      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    depends_on:
      - zookeeper
#    volumes:
#      - ./src:/bitnami/kafka
#      - kafkadb:/var/lib/bitnami/kafka
#      - /path/to/kafka-persistence:/bitnami/kafka


networks:
  bendernetwork:
    driver: bridge

volumes:
  benderdb:
#  kafkadb:
